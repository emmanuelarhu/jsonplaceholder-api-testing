name: üöÄ JSONPlaceholder API Testing Pipeline

on:
  push:
    branches: [ main, tester ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - regression
          - performance
          - security
          - negative
      notification_channel:
        description: 'Notification method'
        required: true
        default: 'github'
        type: choice
        options:
          - github
          - slack
          - email
          - all

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx1024m'
  ALLURE_VERSION: '2.24.0'

jobs:
  # ===============================================
  # JOB 1: RUN API TESTS
  # ===============================================
  run-tests:
    name: üß™ API Tests Execution
    runs-on: ubuntu-latest
    outputs:
      test-result: ${{ steps.test-execution.outputs.result }}
      test-summary: ${{ steps.test-summary.outputs.summary }}
      allure-artifact-name: ${{ steps.artifacts.outputs.name }}

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: ‚òï Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: üì¶ Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: üîß Verify Environment
        run: |
          echo "üåç Environment Information:"
          echo "Java Version: $(java -version 2>&1 | head -1)"
          echo "Maven Version: $(mvn -version | head -1)"
          echo "Test Suite: ${{ github.event.inputs.test_suite || 'all' }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Trigger: ${{ github.event_name }}"

      - name: üß™ Execute API Tests
        id: test-execution
        run: |
          echo "üöÄ Starting API tests..."
          
          # Determine which test suite to run
          TEST_SUITE="${{ github.event.inputs.test_suite || 'all' }}"
          
          if [ "$TEST_SUITE" = "all" ]; then
            echo "Running all tests..."
            mvn clean test -Dmaven.test.failure.ignore=true
          else
            echo "Running $TEST_SUITE tests..."
            mvn clean test -P$TEST_SUITE -Dmaven.test.failure.ignore=true
          fi
          
          # Capture test results
          if [ $? -eq 0 ]; then
            echo "result=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Tests completed successfully"
          else
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "‚ùå Some tests failed"
          fi

      - name: üìä Generate Test Summary
        id: test-summary
        if: always()
        run: |
          echo "üìä Generating test summary..."
          
          # Count test results from Surefire reports
          if [ -d "target/surefire-reports" ]; then
            TOTAL=$(find target/surefire-reports -name "*.xml" -exec grep -h "tests=" {} \; | sed 's/.*tests="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum+0}')
            FAILURES=$(find target/surefire-reports -name "*.xml" -exec grep -h "failures=" {} \; | sed 's/.*failures="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum+0}')
            ERRORS=$(find target/surefire-reports -name "*.xml" -exec grep -h "errors=" {} \; | sed 's/.*errors="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum+0}')
            SKIPPED=$(find target/surefire-reports -name "*.xml" -exec grep -h "skipped=" {} \; | sed 's/.*skipped="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum+0}')
          
            PASSED=$((TOTAL - FAILURES - ERRORS - SKIPPED))
          
            echo "üìà Test Results:"
            echo "Total: $TOTAL | Passed: $PASSED | Failed: $FAILURES | Errors: $ERRORS | Skipped: $SKIPPED"
          
            SUMMARY="Tests: $TOTAL | ‚úÖ Passed: $PASSED | ‚ùå Failed: $FAILURES | üî• Errors: $ERRORS | ‚è≠Ô∏è Skipped: $SKIPPED"
            echo "summary=$SUMMARY" >> $GITHUB_OUTPUT
          else
            echo "summary=No test results found" >> $GITHUB_OUTPUT
          fi

      - name: üìã Generate Allure Report
        if: always()
        run: |
          echo "üìã Generating Allure report..."
          mvn allure:report || echo "‚ö†Ô∏è Allure report generation failed"

      - name: üìÅ Prepare Artifacts
        id: artifacts
        if: always()
        run: |
          # Create timestamp for unique artifact names
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          ARTIFACT_NAME="test-results-$TIMESTAMP"
          echo "name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          
          # Create comprehensive results directory
          mkdir -p test-results
          
          # Copy all relevant files
          [ -d "target/surefire-reports" ] && cp -r target/surefire-reports test-results/ || echo "No surefire reports"
          [ -d "target/allure-results" ] && cp -r target/allure-results test-results/ || echo "No allure results"
          [ -d "target/site/allure-maven-plugin" ] && cp -r target/site/allure-maven-plugin test-results/allure-report || echo "No allure report"
          
          # Create a summary file
          cat > test-results/summary.txt << EOF
          Test Execution Summary
          =====================
          Timestamp: $(date)
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Trigger: ${{ github.event_name }}
          Test Suite: ${{ github.event.inputs.test_suite || 'all' }}
          Result: ${{ steps.test-execution.outputs.result }}
          Summary: ${{ steps.test-summary.outputs.summary }}
          EOF

      - name: üì§ Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifacts.outputs.name }}
          path: test-results/
          retention-days: 30

      - name: üìä Publish Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: üß™ API Test Results
          path: 'target/surefire-reports/*.xml'
          reporter: java-junit
          fail-on-error: false

  # ===============================================
  # JOB 2: DEPLOY ALLURE REPORTS (GitHub Pages)
  # ===============================================
  deploy-reports:
    name: üåê Deploy Allure Reports
    runs-on: ubuntu-latest
    needs: run-tests
    if: always() && github.ref == 'refs/heads/main'
    outputs:
      report-url: ${{ steps.deploy.outputs.page_url }}

    steps:
      - name: üì• Download Test Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.run-tests.outputs.allure-artifact-name }}
          path: test-results/

      - name: üîß Prepare GitHub Pages
        run: |
          echo "üîß Preparing reports for GitHub Pages..."
          
          # Create Pages directory structure
          mkdir -p gh-pages
          
          # Copy Allure report if it exists
          if [ -d "test-results/allure-report" ]; then
            cp -r test-results/allure-report/* gh-pages/
            echo "‚úÖ Allure report copied to gh-pages"
          else
            echo "‚ùå No Allure report found"
            # Create a simple index page if no report exists
            cat > gh-pages/index.html << EOF
            <!DOCTYPE html>
            <html>
            <head>
                <title>API Test Reports</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 40px; }
                    .error { color: #d73a49; }
                    .info { color: #586069; }
                </style>
            </head>
            <body>
                <h1>API Test Reports</h1>
                <p class="error">‚ùå No Allure report available for this run</p>
                <p class="info">Test execution may have failed or report generation was unsuccessful.</p>
                <p class="info">Check the <a href="https://github.com/${{ github.repository }}/actions">GitHub Actions</a> for more details.</p>
            </body>
            </html>
            EOF
          fi

      - name: üöÄ Deploy to GitHub Pages
        id: deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: gh-pages/
          destination_dir: test-reports/

      - name: üìù Output Report URL
        run: |
          REPORT_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/test-reports/"
          echo "üåê Allure Report URL: $REPORT_URL"
          echo "page_url=$REPORT_URL" >> $GITHUB_OUTPUT

  # ===============================================
  # JOB 3: SEND NOTIFICATIONS
  # ===============================================
  notify:
    name: üì¢ Send Notifications
    runs-on: ubuntu-latest
    needs: [run-tests, deploy-reports]
    if: always()

    steps:
      - name: üîß Prepare Notification Data
        id: prepare
        run: |
          # Determine overall status
          TEST_RESULT="${{ needs.run-tests.outputs.test-result }}"
          
          if [ "$TEST_RESULT" = "success" ]; then
            OVERALL_STATUS="‚úÖ SUCCESS"
            STATUS_COLOR="28a745"
            STATUS_EMOJI="‚úÖ"
          else
            OVERALL_STATUS="‚ùå FAILED"
            STATUS_COLOR="d73a49"
            STATUS_EMOJI="‚ùå"
          fi
          
          echo "overall_status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          echo "status_color=$STATUS_COLOR" >> $GITHUB_OUTPUT
          echo "status_emoji=$STATUS_EMOJI" >> $GITHUB_OUTPUT
          
          # Prepare report URL
          REPORT_URL="${{ needs.deploy-reports.outputs.report-url }}"
          if [ -z "$REPORT_URL" ]; then
            REPORT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          fi
          echo "report_url=$REPORT_URL" >> $GITHUB_OUTPUT

      - name: üì± GitHub Issue Comment (for PRs)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('üß™ API Test Results'));
            
            const body = `## ${{ steps.prepare.outputs.status_emoji }} API Test Results
            
            **Status:** ${{ steps.prepare.outputs.overall_status }}
            **Test Summary:** ${{ needs.run-tests.outputs.test-summary }}
            **Branch:** \`${{ github.head_ref }}\`
            **Commit:** \`${{ github.event.pull_request.head.sha }}\`
            
            ### üìä Quick Links
            - üìã [Detailed Test Report](${{ steps.prepare.outputs.report-url }})
            - üîç [GitHub Actions Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            *Updated: ${new Date().toISOString()}*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: üìß Email Notification (Optional)
        if: github.event.inputs.notification_channel == 'email' || github.event.inputs.notification_channel == 'all'
        run: |
          echo "üìß Email notification would be sent here"
          echo "Subject: ${{ steps.prepare.outputs.overall_status }} - API Tests"
          echo "Report URL: ${{ steps.prepare.outputs.report_url }}"
          # Add your email notification logic here

      - name: üí¨ Slack Notification (Optional)
        if: github.event.inputs.notification_channel == 'slack' || github.event.inputs.notification_channel == 'all'
        run: |
          echo "üí¨ Slack notification would be sent here"
          echo "Message: ${{ steps.prepare.outputs.overall_status }}"
          echo "Report URL: ${{ steps.prepare.outputs.report_url }}"
          # Add your Slack webhook logic here

      - name: üì¢ GitHub Notification
        run: |
          echo "## üß™ API Test Pipeline Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.prepare.outputs.overall_status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Test Summary:** ${{ needs.run-tests.outputs.test-summary }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Resources" >> $GITHUB_STEP_SUMMARY
          echo "- üìã [Live Allure Report](${{ steps.prepare.outputs.report_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- üìÅ [Test Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Pipeline executed on $(date)*" >> $GITHUB_STEP_SUMMARY

  # ===============================================
  # JOB 4: CLEANUP (Optional)
  # ===============================================
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [run-tests, deploy-reports, notify]
    if: always() && github.event_name == 'schedule'

    steps:
      - name: üßπ Cleanup Old Artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const oldArtifacts = artifacts.artifacts.filter(artifact => {
              const ageInDays = (Date.now() - new Date(artifact.created_at)) / (1000 * 60 * 60 * 24);
              return ageInDays > 7 && artifact.name.startsWith('test-results-');
            });
            
            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
              console.log(`Deleted artifact: ${artifact.name}`);
            }
            
            console.log(`Cleaned up ${oldArtifacts.length} old artifacts`);

# ===============================================
# REUSABLE WORKFLOWS (Optional)
# ===============================================